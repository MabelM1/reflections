How did viewing a diff between two versions of a file help you see the bug that was introduced?

By following the + and - , it was easy to check only those lines and identify what items had change. 

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

In the event the updates didn't work as desired, one can easily go to the last working version and utilize that until the problem can be corrected.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Cons of manual commit is that you can lose track of time and do a lot of work without commiting.
Pros of manual commit is that you can save at the point you want, so you capture only what you want.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Because, many times you need multiple files in order to run one program.

How can you use the commands git log and git diff to view the history of files?
Git log shows all commit info: name, id, message. Once you locate the commit id, you can then use git diff to see what files changed.

How might using version control make you more confident to make changes that could break something?

You now that if something doesn't work, you can always undo it.

Now that you have your workspace set up, what do you want to try using Git for?
Try to clone a repository and see the changes.


